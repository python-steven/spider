from django.shortcuts import render
from django.shortcuts import render, redirect
# from django.urls import reverse
from django.views.decorators.csrf import csrf_exempt
from app.login.models import User,Department,Customer,BudgetCodeForm,PartItem,PartItemResult,MaintenanceLog,Configuration
from app.login.views import Update_User_IsActivated
from django.views.generic.base import View
from django.db import connection
from django.http import HttpResponseRedirect,HttpResponse
from app import restful,mail
from datetime import datetime,timedelta
from django.conf import settings
import random
import string
import os
import pytz
import time
from openpyxl import load_workbook,Workbook
import json

class maintain_monitor_info(View):
    @csrf_exempt
    def get(self,request):
        page = int(request.GET.get('page'))
        number = request.GET.get('num')
        #这里是获取近一周的数据，但是由于数据没有更新，所以捞取全部当前的数据
        start = datetime.now()
        delta = timedelta(days=300)
        end = start-delta
        dict_data={}
        data_count = PartItem.objects.order_by("Id").filter(TrnDate__range=(end,start)).count()
        if number == "All":
            data = list(PartItem.objects.order_by("Id").filter(TrnDate__range=(end,start)).values())
            mt_count = list(Configuration.objects.filter(Type="mt_count").values("Max"))
            mt_date = list(Configuration.objects.filter(Type="mt_date").values("Max"))
            start_time = datetime.strptime(str(start).split(' ')[0], "%Y-%m-%d") #获取当前的日期
            #计算保养次数和保养日期的水准并加入到后面两组数据当中去做判断
            for i in range(0,len(data)):
                if data[i]['NextCheckDate'] == None and data[i]['NextCheckCount'] ==0:
                    data[i]['stand_date'] = 0
                    data[i]['stand_count'] = 0
                else:
                    time_end = datetime.strptime(str(data[i]['NextCheckDate']).split(' ')[0], "%Y-%m-%d") #获取数据表里面的日期数
                    days = time_end - start_time
                    data[i]['stand_date'] = days.days
                    data[i]['stand_count'] = data[i]['NextCheckCount'] - data[i]['UsedTimes']
            dict_data['data'] = data
            dict_data['mt_count'] = mt_count
            dict_data['mt_date'] = mt_date
            dict_data['page_count'] = data_count
        if number != "All":
            number = int(number)
            page_num = data_count // number  # 总共多少页
            if data_count % number > 0:
                page_num = page_num + 1
            if page_num >= page:
                data = list(PartItem.objects.order_by("Id").filter(TrnDate__range=(end, start)).values()[(page - 1) * number:number * page])
                mt_count = list(Configuration.objects.filter(Type="mt_count").values("Max"))
                mt_date = list(Configuration.objects.filter(Type="mt_date").values("Max"))
                start_time = datetime.strptime(str(start).split(' ')[0], "%Y-%m-%d")  # 获取当前的日期
                # 计算保养次数和保养日期的水准并加入到后面两组数据当中去做判断
                for i in range(0, len(data)):
                    if data[i]['NextCheckDate'] == None and data[i]['NextCheckCount'] == 0:
                        data[i]['stand_date'] = 0
                        data[i]['stand_count'] = 0
                    else:
                        time_end = datetime.strptime(str(data[i]['NextCheckDate']).split(' ')[0],
                                                     "%Y-%m-%d")  # 获取数据表里面的日期数
                        days = time_end - start_time
                        data[i]['stand_date'] = days.days
                        data[i]['stand_count'] = data[i]['NextCheckCount'] - data[i]['UsedTimes']
                dict_data['data'] = data
                dict_data['mt_count'] = mt_count
                dict_data['mt_date'] = mt_date
                dict_data['page_count'] = page_num

        # 饼状图和表格需要的判断依据数据
        sql = 'SELECT "PartName", COUNT("PartName") FROM "PartItem" where to_char("TrnDate",\'yyyy-MM-dd\') >=\''+ end.strftime("%Y-%m-%d")+'\' and to_char("TrnDate",\'yyyy-MM-dd\') <=\''+start.strftime("%Y-%m-%d")+'\''
        # 柱状图需要的数据的原生语句
        tab_sql = 'SELECT "Maintainer", COUNT("PartName") FROM "PartItem" where to_char("TrnDate",\'yyyy-MM-dd\') >=\' '+ end.strftime("%Y-%m-%d")+'\' and  to_char("TrnDate",\'yyyy-MM-dd\') <=\''+start.strftime("%Y-%m-%d")+'\''
        count = Configuration.objects.get(Type="mt_count")
        date = Configuration.objects.get(Type="mt_date")
        c_count = str(int(count.Max))
        c_date = (start+timedelta(days=int(date.Max))).strftime("%Y-%m-%d")  #拿到当前的时间+预警天数得到日期的范围是（当前时间,c_date）
        #饼状图 正常
        sql1 = sql + 'AND "NextCheckCount"-"UsedTimes" > '+c_count+' AND to_char("NextCheckDate",\'yyyy-MM-dd\') >\''+c_date+'\' GROUP BY "PartName"'
        # 预警
        sql2 = sql + ' AND ("NextCheckCount"-"UsedTimes" <= ' + c_count + ' AND "NextCheckCount"-"UsedTimes" >= 0 AND to_char("NextCheckDate",\'yyyy-MM-dd\') >=\'' + start.strftime("%Y-%m-%d") + '\')'
        sql2 = sql2 + ' OR  (to_char("NextCheckDate",\'yyyy-MM-dd\')>=\'' + start.strftime("%Y-%m-%d") + '\' AND to_char("NextCheckDate",\'yyyy-MM-dd\') <= \'' + c_date + '\' AND "NextCheckCount"-"UsedTimes">=0) GROUP BY "PartName"'
        # 超标
        sql3 = sql + 'AND ("NextCheckCount"-"UsedTimes" < 0 OR "NextCheckDate" < \''+start.strftime("%Y-%m-%d")+'\') GROUP BY "PartName"'

        #  柱状图 正常
        tab_normal = tab_sql + 'AND "NextCheckCount"-"UsedTimes" > '+c_count+' AND "NextCheckDate" >\''+c_date+'\' GROUP BY "Maintainer"'
        #  柱状图 预警
        tab_warning = tab_sql + ' AND ("NextCheckCount"-"UsedTimes" <= ' + c_count + ' AND "NextCheckCount"-"UsedTimes" >= 0 AND to_char("NextCheckDate",\'yyyy-MM-dd\') >=\'' + start.strftime("%Y-%m-%d") + '\')'
        tab_warning = tab_warning + ' OR  (to_char("NextCheckDate",\'yyyy-MM-dd\')>=\'' + start.strftime("%Y-%m-%d") + '\' AND to_char("NextCheckDate",\'yyyy-MM-dd\') <= \'' + c_date + '\' AND "NextCheckCount"-"UsedTimes">=0) GROUP BY "Maintainer"'
        #  柱状图 超标
        tab_danger = tab_sql + 'AND ("NextCheckCount"-"UsedTimes" < 0 OR "NextCheckDate" < \''+start.strftime("%Y-%m-%d")+'\') GROUP BY "Maintainer"'

        cur = connection.cursor()
        cur.execute(sql1)
        normal = cur.fetchall()
        cur.execute(sql2)
        warning = cur.fetchall()
        cur.execute(sql3)
        danger = cur.fetchall()

        cur = connection.cursor()
        cur.execute(tab_normal)
        tab_normal = cur.fetchall()
        cur.execute(tab_warning)
        tab_warning = cur.fetchall()
        cur.execute(tab_danger)
        tab_danger = cur.fetchall()

        tab_data =tab_query_way(tab_normal,tab_warning,tab_danger)
        try:
            dict_data['normal'] = normal
            dict_data['warning'] = warning
            dict_data['danger'] = danger
            dict_data['tab_data'] = tab_data
            return restful.ok(data=dict_data)
        except Exception as e:
            return restful.params_error(message=repr(e))
    # 设置预警次数和预警天数
    @csrf_exempt
    def post(self,request):
        maintain_count = request.POST['maintain_count']
        maintain_date = request.POST['maintain_date']
        maintain_receiver = request.POST.getlist('maintain_receiver[]')
        maintain_receiver = list(maintain_receiver)
        try:
            parameter_count = Configuration.objects.filter(Type="mt_count")
            parameter_date = Configuration.objects.filter(Type="mt_date")
            mail_receiver_count = ",".join(maintain_receiver)
            if parameter_count and parameter_date:
                Configuration.objects.filter(Type="mt_count").update(Max=maintain_count,Min=0,Reminders=mail_receiver_count)
                Configuration.objects.filter(Type="mt_date").update(Max=maintain_date,Min=0,Reminders=mail_receiver_count)
                return restful.ok(message="setup parameter success")
            else:
                Configuration.objects.create(Type="mt_count", Max=maintain_count, Min=0, Reminders=mail_receiver_count)
                Configuration.objects.create(Type="mt_date", Max=maintain_date, Min=0, Reminders=mail_receiver_count)
                return restful.ok(message="setup parameter create success")
        except Exception as e:
            return restful.params_error(message=repr(e))


#对保养得数据进行查询功能的实现
def maintain_query(request):
    if request.method == "POST":
        start = datetime.now()
        delta = timedelta(days=300)
        end = start - delta
        page = int(request.POST['page'])
        number = request.POST['num']
        sn = str(request.POST.get('sn'))
        part_name = request.POST.get('partname')
        status = request.POST.get('status')
        s_time = request.POST.get('s_time')
        e_time = request.POST.get('e_time')
        user = request.POST.get('user')
        dict_data = {}
        normal = []
        warning = []
        danger = []
        #计算 查询数据的总的多少条数据
        sql_count = 'select count(*) FROM "PartItem" where to_char("TrnDate",\'yyyy-MM-dd\') >= \''+ end.strftime("%Y-%m-%d")+'\' and to_char("TrnDate",\'yyyy-MM-dd\') <= \''+start.strftime("%Y-%m-%d")+'\''
        #查询条件的数据
        sql = 'select "Id","SN","PartName","CheckCycleCount","UsedTimes","CheckCycle","NextCheckDate","Maintainer","TrnDate","NextCheckCount" FROM "PartItem" WHERE to_char("TrnDate",\'yyyy-MM-dd\') >= \''+ end.strftime("%Y-%m-%d")+'\' and  to_char("TrnDate",\'yyyy-MM-dd\') <=\''+start.strftime("%Y-%m-%d")+'\''
        # 饼图数据按正常和预警和超标分类计算数量
        visual_sql = 'SELECT "PartName", COUNT("PartName") FROM "PartItem" where to_char("TrnDate",\'yyyy-MM-dd\') >= \''+ end.strftime("%Y-%m-%d")+'\' and to_char("TrnDate",\'yyyy-MM-dd\') <= \''+start.strftime("%Y-%m-%d")+'\''
        # 柱状图的数据 按条件查询出来之后再 按负责人分类
        tab_sql = 'SELECT "Maintainer", COUNT("PartName") FROM "PartItem" where to_char("TrnDate",\'yyyy-MM-dd\') >=\' ' + end.strftime("%Y-%m-%d") + '\' and  to_char("TrnDate",\'yyyy-MM-dd\') <=\'' + start.strftime("%Y-%m-%d") + '\''

        count_count = Configuration.objects.get(Type="mt_count")
        date = Configuration.objects.get(Type="mt_date")
        dict_data['limit_value1'] = int(count_count.Max)
        dict_data['limit_value2'] = date.Max
        c_count = str(int(count_count.Max))
        c_date = (start + timedelta(days=int(date.Max))).strftime("%Y-%m-%d")  # 拿到当前的时间+预警天数得到日期的范围是（当前时间,c_date）
        try:
            if sn != "":
                sql_count = sql_count + 'AND "SN" = \'' + sn + '\''
                sql = sql + 'AND "SN" = \'' + sn + '\''
                visual_sql = visual_sql + 'AND "SN" = \'' + sn + '\''
                tab_sql = tab_sql + 'AND "SN" = \'' + sn + '\''
            if part_name != "":
                sql_count = sql_count + 'AND "PartName" ilike \'%{0}%\''.format(part_name)
                sql = sql + 'AND "PartName" ilike \'%{0}%\''.format(part_name)
                visual_sql = visual_sql + 'AND "PartName" ilike \'%{0}%\''.format(part_name)
                tab_sql = tab_sql + 'AND "PartName" ilike \'%{0}%\''.format(part_name)
            if s_time != "":
                sql_count = sql_count + 'AND "TrnDate" >= \'%{0}%\''.format(s_time)
                sql = sql + 'AND "TrnDate" >= \'%{0}%\''.format(s_time)
                visual_sql = visual_sql + 'AND "TrnDate" >= \'%{0}%\''.format(s_time)
                visual_sql = visual_sql + 'AND "TrnDate" >= \'%{0}%\''.format(s_time)
            if e_time != "":
                sql = sql + 'AND "TrnDate" <= \'%{0}%\''.format(e_time)
                visual_sql = visual_sql + 'AND "TrnDate" <= \'%{0}%\''.format(e_time)
                tab_sql = tab_sql + 'AND "TrnDate" <= \'%{0}%\''.format(e_time)
            if user != "":
                sql_count = sql_count + 'AND "Maintainer" ilike \'%{0}%\''.format(user)
                sql = sql + 'AND "Maintainer" ilike \'%{0}%\''.format(user)
                visual_sql = visual_sql + 'AND "Maintainer" ilike \'%{0}%\''.format(user)
                tab_sql = tab_sql + 'AND "Maintainer" ilike \'%{0}%\''.format(user)
            if status == "正常":
                sql_count = sql_count + 'AND "NextCheckCount"-"UsedTimes" > '+c_count+' AND to_char("NextCheckDate",\'yyyy-MM-dd\') >\''+c_date+'\' '

                sql = sql + 'AND "NextCheckCount"-"UsedTimes" > '+c_count+' AND to_char("NextCheckDate",\'yyyy-MM-dd\') >\''+c_date+'\' '

                visual_sql_normal = visual_sql + 'AND "NextCheckCount"-"UsedTimes" > '+c_count+' AND to_char("NextCheckDate",\'yyyy-MM-dd\') >\''+c_date+'\' GROUP BY "PartName"'

                tab_normal = tab_sql + 'AND "NextCheckCount"-"UsedTimes" > '+c_count+' AND to_char("NextCheckDate",\'yyyy-MM-dd\') >\''+c_date+'\' GROUP BY "Maintainer"'

                cur = connection.cursor()
                cur.execute(visual_sql_normal)
                normal = cur.fetchall()
                dict_data['normal'] = normal

                cur = connection.cursor()
                cur.execute(tab_normal)
                tab_normal =cur.fetchall()
                tab_normal = tab_query_way(tab_normal,[],[])
                dict_data['tab_data'] = tab_normal
            if status == "预警":
                sql_count = sql_count + ' AND ("NextCheckCount"-"UsedTimes" <= ' + c_count + ' AND "NextCheckCount"-"UsedTimes" >= 0 AND to_char("NextCheckDate",\'yyyy-MM-dd\') >=\'' + start.strftime("%Y-%m-%d") + '\')'
                sql_count = sql_count + ' OR  (to_char("NextCheckDate",\'yyyy-MM-dd\')>=\'' + start.strftime("%Y-%m-%d") + '\' AND to_char("NextCheckDate",\'yyyy-MM-dd\') <= \'' + c_date + '\' AND "NextCheckCount"-"UsedTimes">=0)'

                sql = sql + ' AND ("NextCheckCount"-"UsedTimes" <= ' + c_count + ' AND "NextCheckCount"-"UsedTimes" >= 0 AND to_char("NextCheckDate",\'yyyy-MM-dd\') >=\'' + start.strftime("%Y-%m-%d") + '\')'
                sql = sql + ' OR  (to_char("NextCheckDate",\'yyyy-MM-dd\')>=\'' + start.strftime("%Y-%m-%d") + '\' AND to_char("NextCheckDate",\'yyyy-MM-dd\') <= \'' + c_date + '\' AND "NextCheckCount"-"UsedTimes">=0)'


                visual_sql = visual_sql + ' AND ("NextCheckCount"-"UsedTimes" <= ' + c_count + ' AND "NextCheckCount"-"UsedTimes" >= 0 AND to_char("NextCheckDate",\'yyyy-MM-dd\') >=\'' + start.strftime("%Y-%m-%d") + '\')'
                visual_sql_waring = visual_sql + ' OR  (to_char("NextCheckDate",\'yyyy-MM-dd\')>=\'' + start.strftime("%Y-%m-%d") + '\' AND to_char("NextCheckDate",\'yyyy-MM-dd\') <= \'' + c_date + '\' AND "NextCheckCount"-"UsedTimes">=0)  GROUP BY "PartName"'

                tab_warning = tab_sql + ' AND ("NextCheckCount"-"UsedTimes" <= ' + c_count + ' AND "NextCheckCount"-"UsedTimes" >= 0 AND to_char("NextCheckDate",\'yyyy-MM-dd\') >=\'' + start.strftime("%Y-%m-%d") + '\')'
                tab_warning = tab_warning + ' OR  (to_char("NextCheckDate",\'yyyy-MM-dd\')>=\'' + start.strftime("%Y-%m-%d") + '\' AND to_char("NextCheckDate",\'yyyy-MM-dd\') <= \'' + c_date + '\' AND "NextCheckCount"-"UsedTimes">=0)  GROUP BY "Maintainer"'

                cur = connection.cursor()
                cur.execute(visual_sql_waring)
                warning = cur.fetchall()
                dict_data['warning'] = warning

                cur.execute(tab_warning)
                tab_warning = cur.fetchall()
                tab_warning = tab_query_way([],tab_warning,[])
                dict_data['tab_data'] = tab_warning
            if status == "超标":
                sql = sql + 'AND ("NextCheckCount"-"UsedTimes" < 0 OR "NextCheckDate" < \''+start.strftime("%Y-%m-%d")+'\')'

                sql_count = sql_count + 'AND ("NextCheckCount"-"UsedTimes" < 0 OR "NextCheckDate" < \''+start.strftime("%Y-%m-%d")+'\')'

                visual_sql_danger = visual_sql + 'AND ("NextCheckCount"-"UsedTimes" < 0 OR "NextCheckDate" < \''+start.strftime("%Y-%m-%d")+'\') GROUP BY "PartName"'

                tab_danger = tab_sql + 'AND ("NextCheckCount"-"UsedTimes" < 0 OR "NextCheckDate" < \''+start.strftime("%Y-%m-%d")+'\') GROUP BY "Maintainer"'
                cur = connection.cursor()
                cur.execute(visual_sql_danger)
                danger = cur.fetchall()
                dict_data['danger'] = danger
                cur.execute(tab_danger)
                tab_danger = cur.fetchall()
                tab_danger = tab_query_way([], [], tab_danger)
                dict_data['tab_data'] = tab_danger
            if status == "":
                #normal
                visual_sql_normal = visual_sql + 'AND "NextCheckCount"-"UsedTimes" > ' + c_count + ' AND to_char("NextCheckDate",\'yyyy-MM-dd\') >\'' + c_date + '\' GROUP BY "PartName"'
                tab_normal = tab_sql + 'AND "NextCheckCount"-"UsedTimes" > ' + c_count + ' AND to_char("NextCheckDate",\'yyyy-MM-dd\') >\'' + c_date + '\' GROUP BY "Maintainer"'
                #warning
                visual_sql_waring = visual_sql + ' AND ("NextCheckCount"-"UsedTimes" <= ' + c_count + ' AND "NextCheckCount"-"UsedTimes" >= 0 AND to_char("NextCheckDate",\'yyyy-MM-dd\') >=\'' + start.strftime("%Y-%m-%d") + '\')'
                visual_sql_waring = visual_sql_waring + ' OR  (to_char("NextCheckDate",\'yyyy-MM-dd\')>=\'' + start.strftime("%Y-%m-%d") + '\' AND to_char("NextCheckDate",\'yyyy-MM-dd\') <= \'' + c_date + '\' AND "NextCheckCount"-"UsedTimes">=0)  GROUP BY "PartName"'
                tab_warning = tab_sql + ' AND ("NextCheckCount"-"UsedTimes" <= ' + c_count + ' AND "NextCheckCount"-"UsedTimes" >= 0 AND to_char("NextCheckDate",\'yyyy-MM-dd\') >=\'' + start.strftime("%Y-%m-%d") + '\')'
                tab_warning = tab_warning + ' OR  (to_char("NextCheckDate",\'yyyy-MM-dd\')>=\'' + start.strftime("%Y-%m-%d") + '\' AND to_char("NextCheckDate",\'yyyy-MM-dd\') <= \'' + c_date + '\' AND "NextCheckCount"-"UsedTimes">=0)  GROUP BY "Maintainer"'
                #danger
                visual_sql_danger = visual_sql + 'AND ("NextCheckCount"-"UsedTimes" < 0 OR "NextCheckDate" < \'' + start.strftime("%Y-%m-%d") + '\') GROUP BY "PartName"'
                tab_danger = tab_sql + 'AND ("NextCheckCount"-"UsedTimes" < 0 OR "NextCheckDate" < \'' + start.strftime("%Y-%m-%d") + '\') GROUP BY "Maintainer"'
                cur = connection.cursor()
                cur.execute(visual_sql_normal)
                normal = cur.fetchall()
                cur.execute(visual_sql_waring)
                warning = cur.fetchall()
                cur.execute(visual_sql_danger)
                danger = cur.fetchall()

                cur.execute(tab_normal)
                tab_normal = cur.fetchall()
                cur.execute(tab_warning)
                tab_warning = cur.fetchall()
                cur.execute(tab_danger)
                tab_danger = cur.fetchall()
                tab_data = tab_query_way(tab_normal,tab_warning, tab_danger )
                dict_data['tab_data'] = tab_data
                dict_data['normal'] = normal
                dict_data['warning'] = warning
                dict_data['danger'] = danger
            cur = connection.cursor()
            cur.execute(sql_count)
            count = cur.fetchall()  # 数量的总数
            if number == "All":
                cur = connection.cursor()
                cur.execute(sql)
                data = cur.fetchall()
                # 针对data 进行判断和算出次数水平和周期天数
                start_time = datetime.strptime(str(start).split(' ')[0], "%Y-%m-%d")  # 获取当前的日期
                for i in range(0, len(data)):
                    if data[i][6] == None and data[i][9] == 0:
                        data[i] = list(data[i])
                        data[i].append(0)
                        data[i].append(0)
                    else:
                        time_end = datetime.strptime(str(data[i][6]).split(' ')[0], "%Y-%m-%d")
                        days = time_end - start_time
                        data[i] = list(data[i])
                        data[i].append(data[i][9] - data[i][4])
                        data[i].append(days.days)
                dict_data['data'] = data
                dict_data['page_count'] = count[0][0]
            if number != "All":
                number = int(number)
                count_page = count[0][0] // int(number)  # 总数除以一页显示多少条，得到总的页数
                if count[0][0] % number > 0:
                    count_page += 1
                if page <= count_page:
                    sql = sql + ' order by "Id" limit ' + str(number) + ' offset ' + str(page - 1)
                    cur = connection.cursor()
                    cur.execute(sql)
                    data = cur.fetchall()
                    # 针对data 进行判断和算出次数水平和周期天数
                    start_time = datetime.strptime(str(start).split(' ')[0], "%Y-%m-%d")  # 获取当前的日期
                    for i in range(0, len(data)):
                        if data[i][6] == None and data[i][9] == 0:
                            data[i] = list(data[i])
                            data[i].append(0)
                            data[i].append(0)
                        else:
                            time_end = datetime.strptime(str(data[i][6]).split(' ')[0], "%Y-%m-%d")
                            days = time_end - start_time
                            data[i] = list(data[i])
                            data[i].append(data[i][9] - data[i][4])
                            data[i].append(days.days)
                    dict_data['data'] = data
                    dict_data['page_count'] = count_page
                if page > count_page:
                    sql = sql + ' order by "Id" limit ' + str(number) + ' offset ' + str(0)
                    cur = connection.cursor()
                    cur.execute(sql)
                    data = cur.fetchall()
                    # 针对data 进行判断和算出次数水平和周期天数
                    start_time = datetime.strptime(str(start).split(' ')[0], "%Y-%m-%d")  # 获取当前的日期
                    for i in range(0, len(data)):
                        if data[i][6] == None and data[i][9] == 0:
                            data[i] = list(data[i])
                            data[i].append(0)
                            data[i].append(0)
                        else:
                            time_end = datetime.strptime(str(data[i][6]).split(' ')[0], "%Y-%m-%d")
                            days = time_end - start_time
                            data[i] = list(data[i])
                            data[i].append(data[i][9] - data[i][4])
                            data[i].append(days.days)
                    dict_data['data'] = data
                    dict_data['page_count'] = count_page

            dict_data['normal'] = normal
            dict_data['warning'] = warning
            dict_data['danger'] = danger
            return restful.ok(data=dict_data)
        except Exception as e:
            return restful.params_error(message=repr(e))

#对视图的点击事件的功能实现
def maintain_monitor_visual(request):
    start = datetime.now()
    delta = timedelta(days=300)
    end = start - delta
    page = int(request.POST['page'])
    number = request.POST['num']
    sn = str(request.POST.get('sn',''))
    part_name = request.POST.get('partname','')
    status = request.POST.get('status','')
    s_time = request.POST.get('s_time','')
    e_time = request.POST.get('e_time','')
    user = request.POST.get('user','')
    dict_data = {}
    normal = []
    warning = []
    danger = []
    # 计算 查询数据的总的多少条数据
    sql_count = 'select count(*) FROM "PartItem" where to_char("TrnDate",\'yyyy-MM-dd\') >= \'' + end.strftime(
        "%Y-%m-%d") + '\' and to_char("TrnDate",\'yyyy-MM-dd\') <= \'' + start.strftime("%Y-%m-%d") + '\''
    # 查询条件的数据
    sql = 'select "Id","SN","PartName","CheckCycleCount","UsedTimes","CheckCycle","NextCheckDate","Maintainer","TrnDate","NextCheckCount" FROM "PartItem" WHERE to_char("TrnDate",\'yyyy-MM-dd\') >= \'' + end.strftime(
        "%Y-%m-%d") + '\' and  to_char("TrnDate",\'yyyy-MM-dd\') <=\'' + start.strftime("%Y-%m-%d") + '\''
    # 饼图数据按正常和预警和超标分类计算数量
    visual_sql = 'SELECT "PartName", COUNT("PartName") FROM "PartItem" where to_char("TrnDate",\'yyyy-MM-dd\') >= \'' + end.strftime(
        "%Y-%m-%d") + '\' and to_char("TrnDate",\'yyyy-MM-dd\') <= \'' + start.strftime("%Y-%m-%d") + '\''
    # 柱状图的数据 按条件查询出来之后再 按负责人分类
    tab_sql = 'SELECT "Maintainer", COUNT("PartName") FROM "PartItem" where to_char("TrnDate",\'yyyy-MM-dd\') >=\' ' + end.strftime(
        "%Y-%m-%d") + '\' and  to_char("TrnDate",\'yyyy-MM-dd\') <=\'' + start.strftime("%Y-%m-%d") + '\''

    count_count = Configuration.objects.get(Type="mt_count")
    date = Configuration.objects.get(Type="mt_date")
    dict_data['limit_value1'] = int(count_count.Max)
    dict_data['limit_value2'] = date.Max
    c_count = str(int(count_count.Max))
    c_date = (start + timedelta(days=int(date.Max))).strftime("%Y-%m-%d")  # 拿到当前的时间+预警天数得到日期的范围是（当前时间,c_date）
    try:
        if sn != "":
            sql_count = sql_count + 'AND "SN" = \'' + sn + '\''
            sql = sql + 'AND "SN" = \'' + sn + '\''
            visual_sql = visual_sql + 'AND "SN" = \'' + sn + '\''
            tab_sql = tab_sql + 'AND "SN" = \'' + sn + '\''
        if part_name != "":
            sql_count = sql_count + 'AND "PartName" like \'%{0}%\''.format(part_name)
            sql = sql + 'AND "PartName" like \'%{0}%\''.format(part_name)
            visual_sql = visual_sql + 'AND "PartName" like \'%{0}%\''.format(part_name)
            tab_sql = tab_sql + 'AND "PartName" like \'%{0}%\''.format(part_name)
        if s_time != "":
            sql_count = sql_count + 'AND "TrnDate" >= \'%{0}%\''.format(s_time)
            sql = sql + 'AND "TrnDate" >= \'%{0}%\''.format(s_time)
            visual_sql = visual_sql + 'AND "TrnDate" >= \'%{0}%\''.format(s_time)
            visual_sql = visual_sql + 'AND "TrnDate" >= \'%{0}%\''.format(s_time)
        if e_time != "":
            sql = sql + 'AND "TrnDate" <= \'%{0}%\''.format(e_time)
            visual_sql = visual_sql + 'AND "TrnDate" <= \'%{0}%\''.format(e_time)
            tab_sql = tab_sql + 'AND "TrnDate" <= \'%{0}%\''.format(e_time)
        if user != "":
            sql_count = sql_count + 'AND "Maintainer" like \'%{0}%\''.format(user)
            sql = sql + 'AND "Maintainer" like \'%{0}%\''.format(user)
            visual_sql = visual_sql + 'AND "Maintainer" like \'%{0}%\''.format(user)
            tab_sql = tab_sql + 'AND "Maintainer" like \'%{0}%\''.format(user)
        if status == "#28a745":
            sql_count = sql_count + 'AND "NextCheckCount"-"UsedTimes" > ' + c_count + ' AND to_char("NextCheckDate",\'yyyy-MM-dd\') >\'' + c_date + '\' '

            sql = sql + 'AND "NextCheckCount"-"UsedTimes" > ' + c_count + ' AND to_char("NextCheckDate",\'yyyy-MM-dd\') >\'' + c_date + '\' '

            visual_sql_normal = visual_sql + 'AND "NextCheckCount"-"UsedTimes" > ' + c_count + ' AND to_char("NextCheckDate",\'yyyy-MM-dd\') >\'' + c_date + '\' GROUP BY "PartName"'

            tab_normal = tab_sql + 'AND "NextCheckCount"-"UsedTimes" > ' + c_count + ' AND to_char("NextCheckDate",\'yyyy-MM-dd\') >\'' + c_date + '\' GROUP BY "Maintainer"'

            cur = connection.cursor()
            cur.execute(visual_sql_normal)
            normal = cur.fetchall()
            dict_data['normal'] = normal

            cur = connection.cursor()
            cur.execute(tab_normal)
            tab_normal = cur.fetchall()
            tab_normal = tab_query_way(tab_normal, [], [])
            dict_data['tab_data'] = tab_normal
        if status == "#ffc107":
            sql_count = sql_count + ' AND ("NextCheckCount"-"UsedTimes" <= ' + c_count + ' AND "NextCheckCount"-"UsedTimes" >= 0 AND to_char("NextCheckDate",\'yyyy-MM-dd\') >=\'' + start.strftime(
                "%Y-%m-%d") + '\')'
            sql_count = sql_count + ' OR  (to_char("NextCheckDate",\'yyyy-MM-dd\')>=\'' + start.strftime(
                "%Y-%m-%d") + '\' AND to_char("NextCheckDate",\'yyyy-MM-dd\') <= \'' + c_date + '\' AND "NextCheckCount"-"UsedTimes">=0)'

            sql = sql + ' AND ("NextCheckCount"-"UsedTimes" <= ' + c_count + ' AND "NextCheckCount"-"UsedTimes" >= 0 AND to_char("NextCheckDate",\'yyyy-MM-dd\') >=\'' + start.strftime(
                "%Y-%m-%d") + '\')'
            sql = sql + ' OR  (to_char("NextCheckDate",\'yyyy-MM-dd\')>=\'' + start.strftime(
                "%Y-%m-%d") + '\' AND to_char("NextCheckDate",\'yyyy-MM-dd\') <= \'' + c_date + '\' AND "NextCheckCount"-"UsedTimes">=0)'

            visual_sql = visual_sql + ' AND ("NextCheckCount"-"UsedTimes" <= ' + c_count + ' AND "NextCheckCount"-"UsedTimes" >= 0 AND to_char("NextCheckDate",\'yyyy-MM-dd\') >=\'' + start.strftime(
                "%Y-%m-%d") + '\')'
            visual_sql_waring = visual_sql + ' OR  (to_char("NextCheckDate",\'yyyy-MM-dd\')>=\'' + start.strftime(
                "%Y-%m-%d") + '\' AND to_char("NextCheckDate",\'yyyy-MM-dd\') <= \'' + c_date + '\' AND "NextCheckCount"-"UsedTimes">=0)  GROUP BY "PartName"'

            tab_warning = tab_sql + ' AND ("NextCheckCount"-"UsedTimes" <= ' + c_count + ' AND "NextCheckCount"-"UsedTimes" >= 0 AND to_char("NextCheckDate",\'yyyy-MM-dd\') >=\'' + start.strftime(
                "%Y-%m-%d") + '\')'
            tab_warning = tab_warning + ' OR  (to_char("NextCheckDate",\'yyyy-MM-dd\')>=\'' + start.strftime(
                "%Y-%m-%d") + '\' AND to_char("NextCheckDate",\'yyyy-MM-dd\') <= \'' + c_date + '\' AND "NextCheckCount"-"UsedTimes">=0)  GROUP BY "Maintainer"'

            cur = connection.cursor()
            cur.execute(visual_sql_waring)
            warning = cur.fetchall()
            dict_data['warning'] = warning

            cur.execute(tab_warning)
            tab_warning = cur.fetchall()
            tab_warning = tab_query_way([], tab_warning, [])
            dict_data['tab_data'] = tab_warning
        if status == "#dc3545":
            sql = sql + 'AND ("NextCheckCount"-"UsedTimes" < 0 OR "NextCheckDate" < \'' + start.strftime(
                "%Y-%m-%d") + '\')'

            sql_count = sql_count + 'AND ("NextCheckCount"-"UsedTimes" < 0 OR "NextCheckDate" < \'' + start.strftime(
                "%Y-%m-%d") + '\')'

            visual_sql_danger = visual_sql + 'AND ("NextCheckCount"-"UsedTimes" < 0 OR "NextCheckDate" < \'' + start.strftime(
                "%Y-%m-%d") + '\') GROUP BY "PartName"'

            tab_danger = tab_sql + 'AND ("NextCheckCount"-"UsedTimes" < 0 OR "NextCheckDate" < \'' + start.strftime(
                "%Y-%m-%d") + '\') GROUP BY "Maintainer"'
            cur = connection.cursor()
            cur.execute(visual_sql_danger)
            danger = cur.fetchall()
            dict_data['danger'] = danger
            cur.execute(tab_danger)
            tab_danger = cur.fetchall()
            tab_danger = tab_query_way([], [], tab_danger)
            dict_data['tab_data'] = tab_danger
        if status == "":
            # normal
            visual_sql_normal = visual_sql + 'AND "NextCheckCount"-"UsedTimes" > ' + c_count + ' AND to_char("NextCheckDate",\'yyyy-MM-dd\') >\'' + c_date + '\' GROUP BY "PartName"'
            tab_normal = tab_sql + 'AND "NextCheckCount"-"UsedTimes" > ' + c_count + ' AND to_char("NextCheckDate",\'yyyy-MM-dd\') >\'' + c_date + '\' GROUP BY "Maintainer"'
            # warning
            visual_sql_waring = visual_sql + ' AND ("NextCheckCount"-"UsedTimes" <= ' + c_count + ' AND "NextCheckCount"-"UsedTimes" >= 0 AND to_char("NextCheckDate",\'yyyy-MM-dd\') >=\'' + start.strftime(
                "%Y-%m-%d") + '\')'
            visual_sql_waring = visual_sql_waring + ' OR  (to_char("NextCheckDate",\'yyyy-MM-dd\')>=\'' + start.strftime(
                "%Y-%m-%d") + '\' AND to_char("NextCheckDate",\'yyyy-MM-dd\') <= \'' + c_date + '\' AND "NextCheckCount"-"UsedTimes">=0)  GROUP BY "PartName"'
            tab_warning = tab_sql + ' AND ("NextCheckCount"-"UsedTimes" <= ' + c_count + ' AND "NextCheckCount"-"UsedTimes" >= 0 AND to_char("NextCheckDate",\'yyyy-MM-dd\') >=\'' + start.strftime(
                "%Y-%m-%d") + '\')'
            tab_warning = tab_warning + ' OR  (to_char("NextCheckDate",\'yyyy-MM-dd\')>=\'' + start.strftime(
                "%Y-%m-%d") + '\' AND to_char("NextCheckDate",\'yyyy-MM-dd\') <= \'' + c_date + '\' AND "NextCheckCount"-"UsedTimes">=0)  GROUP BY "Maintainer"'
            # danger
            visual_sql_danger = visual_sql + 'AND ("NextCheckCount"-"UsedTimes" < 0 OR "NextCheckDate" < \'' + start.strftime(
                "%Y-%m-%d") + '\') GROUP BY "PartName"'
            tab_danger = tab_sql + 'AND ("NextCheckCount"-"UsedTimes" < 0 OR "NextCheckDate" < \'' + start.strftime(
                "%Y-%m-%d") + '\') GROUP BY "Maintainer"'
            cur = connection.cursor()
            cur.execute(visual_sql_normal)
            normal = cur.fetchall()
            cur.execute(visual_sql_waring)
            warning = cur.fetchall()
            cur.execute(visual_sql_danger)
            danger = cur.fetchall()

            cur.execute(tab_normal)
            tab_normal = cur.fetchall()
            cur.execute(tab_warning)
            tab_warning = cur.fetchall()
            cur.execute(tab_danger)
            tab_danger = cur.fetchall()
            tab_data = tab_query_way(tab_normal, tab_warning, tab_danger)
            dict_data['tab_data'] = tab_data
            dict_data['normal'] = normal
            dict_data['warning'] = warning
            dict_data['danger'] = danger
        cur = connection.cursor()
        cur.execute(sql_count)
        count = cur.fetchall()  # 数量的总数
        if number == "All":
            cur = connection.cursor()
            cur.execute(sql)
            data = cur.fetchall()
            # 针对data 进行判断和算出次数水平和周期天数
            start_time = datetime.strptime(str(start).split(' ')[0], "%Y-%m-%d")  # 获取当前的日期
            for i in range(0, len(data)):
                if data[i][6] == None and data[i][9] == 0:
                    data[i] = list(data[i])
                    data[i].append(0)
                    data[i].append(0)
                else:
                    time_end = datetime.strptime(str(data[i][6]).split(' ')[0], "%Y-%m-%d")
                    days = time_end - start_time
                    data[i] = list(data[i])
                    data[i].append(data[i][9] - data[i][4])
                    data[i].append(days.days)
            dict_data['data'] = data
            dict_data['page_count'] = count[0][0]
        if number != "All":
            number = int(number)
            count_page = count[0][0] // int(number)  # 总数除以一页显示多少条，得到总的页数
            if count[0][0] % number > 0:
                count_page += 1
            if page <= count_page:
                sql = sql + ' order by "Id" limit ' + str(number) + ' offset ' + str(page - 1)
                cur = connection.cursor()
                cur.execute(sql)
                data = cur.fetchall()
                # 针对data 进行判断和算出次数水平和周期天数
                start_time = datetime.strptime(str(start).split(' ')[0], "%Y-%m-%d")  # 获取当前的日期
                for i in range(0, len(data)):
                    if data[i][6] == None and data[i][9] == 0:
                        data[i] = list(data[i])
                        data[i].append(0)
                        data[i].append(0)
                    else:
                        time_end = datetime.strptime(str(data[i][6]).split(' ')[0], "%Y-%m-%d")
                        days = time_end - start_time
                        data[i] = list(data[i])
                        data[i].append(data[i][9] - data[i][4])
                        data[i].append(days.days)
                dict_data['data'] = data
                dict_data['page_count'] = count_page
            if page > count_page:
                sql = sql + ' order by "Id" limit ' + str(number) + ' offset ' + str(0)
                cur = connection.cursor()
                cur.execute(sql)
                data = cur.fetchall()
                # 针对data 进行判断和算出次数水平和周期天数
                start_time = datetime.strptime(str(start).split(' ')[0], "%Y-%m-%d")  # 获取当前的日期
                for i in range(0, len(data)):
                    if data[i][6] == None and data[i][9] == 0:
                        data[i] = list(data[i])
                        data[i].append(0)
                        data[i].append(0)
                    else:
                        time_end = datetime.strptime(str(data[i][6]).split(' ')[0], "%Y-%m-%d")
                        days = time_end - start_time
                        data[i] = list(data[i])
                        data[i].append(data[i][9] - data[i][4])
                        data[i].append(days.days)
                dict_data['data'] = data
                dict_data['page_count'] = count_page

        dict_data['normal'] = normal
        dict_data['warning'] = warning
        dict_data['danger'] = danger
        return restful.ok(data=dict_data)
    except Exception as e:
        return restful.params_error(message=repr(e))

#用户定义的页码查询数据
def maintain_monitor_change_page(request):
    if request.method == "POST":
        page = int(request.POST.get('page'))
        number = request.POST.get('num')
        # 这里是获取近一周的数据，但是由于数据没有更新，所以捞取全部当前的数据
        start = datetime.now()
        delta = timedelta(days=300)
        end = start - delta
        dict_data = {}
        data_count = PartItem.objects.order_by("Id").filter(TrnDate__range=(end, start)).count()
        if number == "All":
            data = list(PartItem.objects.order_by("Id").filter(TrnDate__range=(end, start)).values())
            mt_count = list(Configuration.objects.filter(Type="mt_count").values("Max"))
            mt_date = list(Configuration.objects.filter(Type="mt_date").values("Max"))
            start_time = datetime.strptime(str(start).split(' ')[0], "%Y-%m-%d")  # 获取当前的日期
            # 计算保养次数和保养日期的水准并加入到后面两组数据当中去做判断
            for i in range(0, len(data)):
                if data[i]['NextCheckDate'] == None and data[i]['NextCheckCount'] == 0:
                    data[i]['stand_date'] = 0
                    data[i]['stand_count'] = 0
                else:
                    time_end = datetime.strptime(str(data[i]['NextCheckDate']).split(' ')[0], "%Y-%m-%d")  # 获取数据表里面的日期数
                    days = time_end - start_time
                    data[i]['stand_date'] = days.days
                    data[i]['stand_count'] = data[i]['NextCheckCount'] - data[i]['UsedTimes']
            dict_data['data'] = data
            dict_data['mt_count'] = mt_count
            dict_data['mt_date'] = mt_date
            dict_data['page_count'] = data_count
        if number != "All":
            number = int(number)
            page_num = data_count // number  # 总共多少页
            if data_count % number > 0:
                page_num = page_num + 1
            if page_num >= page:
                data = list(PartItem.objects.order_by("Id").filter(TrnDate__range=(end, start)).values()[
                            (page - 1) * number:number * page])
                mt_count = list(Configuration.objects.filter(Type="mt_count").values("Max"))
                mt_date = list(Configuration.objects.filter(Type="mt_date").values("Max"))
                start_time = datetime.strptime(str(start).split(' ')[0], "%Y-%m-%d")  # 获取当前的日期
                # 计算保养次数和保养日期的水准并加入到后面两组数据当中去做判断
                for i in range(0, len(data)):
                    if data[i]['NextCheckDate'] == None and data[i]['NextCheckCount'] == 0:
                        data[i]['stand_date'] = 0
                        data[i]['stand_count'] = 0
                    else:
                        time_end = datetime.strptime(str(data[i]['NextCheckDate']).split(' ')[0],
                                                     "%Y-%m-%d")  # 获取数据表里面的日期数
                        days = time_end - start_time
                        data[i]['stand_date'] = days.days
                        data[i]['stand_count'] = data[i]['NextCheckCount'] - data[i]['UsedTimes']
                dict_data['data'] = data
                dict_data['mt_count'] = mt_count
                dict_data['mt_date'] = mt_date
                dict_data['page_count'] = page_num
        try:
            return restful.ok(data=dict_data)
        except Exception as e:
            return restful.params_error(message=repr(e))
#用户定义之后的下一个页码的数据
def maintain_query_next(request):
    if request.method == "POST":
        start = datetime.now()
        delta = timedelta(days=300)
        end = start - delta
        page = int(request.POST['page'])
        number = request.POST['num']
        sn = str(request.POST.get('sn'))
        part_name = request.POST.get('partname')
        status = request.POST.get('status')
        s_time = request.POST.get('s_time')
        e_time = request.POST.get('e_time')
        user = request.POST.get('user')
        dict_data = {}
        # 计算 查询数据的总的多少条数据
        sql_count = 'select count(*) FROM "PartItem" where to_char("TrnDate",\'yyyy-MM-dd\') >= \'' + end.strftime(
            "%Y-%m-%d") + '\' and to_char("TrnDate",\'yyyy-MM-dd\') <= \'' + start.strftime("%Y-%m-%d") + '\''
        # 查询条件的数据
        sql = 'select "Id","SN","PartName","CheckCycleCount","UsedTimes","CheckCycle","NextCheckDate","Maintainer","TrnDate","NextCheckCount" FROM "PartItem" WHERE to_char("TrnDate",\'yyyy-MM-dd\') >= \'' + end.strftime(
            "%Y-%m-%d") + '\' and  to_char("TrnDate",\'yyyy-MM-dd\') <=\'' + start.strftime("%Y-%m-%d") + '\''
        count_count = Configuration.objects.get(Type="mt_count")
        date = Configuration.objects.get(Type="mt_date")
        dict_data['limit_value1'] = int(count_count.Max)
        dict_data['limit_value2'] = date.Max
        c_count = str(int(count_count.Max))
        c_date = (start + timedelta(days=int(date.Max))).strftime("%Y-%m-%d")  # 拿到当前的时间+预警天数得到日期的范围是（当前时间,c_date）
        try:
            if sn != "":
                sql_count = sql_count + 'AND "SN" = \'' + sn + '\''
                sql = sql + 'AND "SN" = \'' + sn + '\''
            if part_name != "":
                sql_count = sql_count + 'AND "PartName" like \'%{0}%\''.format(part_name)
                sql = sql + 'AND "PartName" like \'%{0}%\''.format(part_name)
            if s_time != "":
                sql_count = sql_count + 'AND "TrnDate" >= \'%{0}%\''.format(s_time)
                sql = sql + 'AND "TrnDate" >= \'%{0}%\''.format(s_time)
            if e_time != "":
                sql_count = sql_count + 'AND "TrnDate" <= \'%{0}%\''.format(e_time)
                sql = sql + 'AND "TrnDate" <= \'%{0}%\''.format(e_time)
            if user != "":
                sql_count = sql_count + 'AND "Maintainer" ilike \'%{0}%\''.format(user)
                sql = sql + 'AND "Maintainer" ilike \'%{0}%\''.format(user)
            if status == "正常":
                sql_count = sql_count + 'AND "NextCheckCount"-"UsedTimes" > ' + c_count + ' AND to_char("NextCheckDate",\'yyyy-MM-dd\') >\'' + c_date + '\' '
                sql = sql + 'AND "NextCheckCount"-"UsedTimes" > ' + c_count + ' AND to_char("NextCheckDate",\'yyyy-MM-dd\') >\'' + c_date + '\' '
            if status == "预警":
                sql_count = sql_count + ' AND ("NextCheckCount"-"UsedTimes" <= ' + c_count + ' AND "NextCheckCount"-"UsedTimes" >= 0 AND to_char("NextCheckDate",\'yyyy-MM-dd\') >=\'' + start.strftime(
                    "%Y-%m-%d") + '\')'
                sql_count = sql_count + ' OR  (to_char("NextCheckDate",\'yyyy-MM-dd\')>=\'' + start.strftime(
                    "%Y-%m-%d") + '\' AND to_char("NextCheckDate",\'yyyy-MM-dd\') <= \'' + c_date + '\' AND "NextCheckCount"-"UsedTimes">=0)'

                sql = sql + ' AND ("NextCheckCount"-"UsedTimes" <= ' + c_count + ' AND "NextCheckCount"-"UsedTimes" >= 0 AND to_char("NextCheckDate",\'yyyy-MM-dd\') >=\'' + start.strftime(
                    "%Y-%m-%d") + '\')'
                sql = sql + ' OR  (to_char("NextCheckDate",\'yyyy-MM-dd\')>=\'' + start.strftime(
                    "%Y-%m-%d") + '\' AND to_char("NextCheckDate",\'yyyy-MM-dd\') <= \'' + c_date + '\' AND "NextCheckCount"-"UsedTimes">=0)'
            if status == "超标":
                sql = sql + 'AND ("NextCheckCount"-"UsedTimes" < 0 OR "NextCheckDate" < \'' + start.strftime(
                    "%Y-%m-%d") + '\')'
                sql_count = sql_count + 'AND ("NextCheckCount"-"UsedTimes" < 0 OR "NextCheckDate" < \'' + start.strftime(
                    "%Y-%m-%d") + '\')'
            cur = connection.cursor()
            cur.execute(sql_count)
            count = cur.fetchall()  # 数量的总数
            if number == "All":
                cur = connection.cursor()
                cur.execute(sql)
                data = cur.fetchall()
                # 针对data 进行判断和算出次数水平和周期天数
                start_time = datetime.strptime(str(start).split(' ')[0], "%Y-%m-%d")  # 获取当前的日期
                for i in range(0, len(data)):
                    if data[i][6] == None and data[i][9] == 0:
                        data[i] = list(data[i])
                        data[i].append(0)
                        data[i].append(0)
                    else:
                        time_end = datetime.strptime(str(data[i][6]).split(' ')[0], "%Y-%m-%d")
                        days = time_end - start_time
                        data[i] = list(data[i])
                        data[i].append(data[i][9] - data[i][4])
                        data[i].append(days.days)
                dict_data['data'] = data
                dict_data['page_count'] = count[0][0]
            if number != "All":
                number = int(number)
                count_page = count[0][0] // int(number)  # 总数除以一页显示多少条，得到总的页数
                if count[0][0] % number > 0:
                    count_page += 1
                if page <= count_page:
                    sql = sql + ' order by "Id" limit ' + str(number) + ' offset ' + str(page - 1)
                    cur = connection.cursor()
                    cur.execute(sql)
                    data = cur.fetchall()
                    # 针对data 进行判断和算出次数水平和周期天数
                    start_time = datetime.strptime(str(start).split(' ')[0], "%Y-%m-%d")  # 获取当前的日期
                    for i in range(0, len(data)):
                        if data[i][6] == None and data[i][9] == 0:
                            data[i] = list(data[i])
                            data[i].append(0)
                            data[i].append(0)
                        else:
                            time_end = datetime.strptime(str(data[i][6]).split(' ')[0], "%Y-%m-%d")
                            days = time_end - start_time
                            data[i] = list(data[i])
                            data[i].append(data[i][9] - data[i][4])
                            data[i].append(days.days)
                    dict_data['data'] = data
                    dict_data['page_count'] = count_page
                if page > count_page:
                    sql = sql + ' order by "Id" limit ' + str(number) + ' offset ' + str(0)
                    cur = connection.cursor()
                    cur.execute(sql)
                    data = cur.fetchall()
                    # 针对data 进行判断和算出次数水平和周期天数
                    start_time = datetime.strptime(str(start).split(' ')[0], "%Y-%m-%d")  # 获取当前的日期
                    for i in range(0, len(data)):
                        if data[i][6] == None and data[i][9] == 0:
                            data[i] = list(data[i])
                            data[i].append(0)
                            data[i].append(0)
                        else:
                            time_end = datetime.strptime(str(data[i][6]).split(' ')[0], "%Y-%m-%d")
                            days = time_end - start_time
                            data[i] = list(data[i])
                            data[i].append(data[i][9] - data[i][4])
                            data[i].append(days.days)
                    dict_data['data'] = data
                    dict_data['page_count'] = count_page
            return restful.ok(data=dict_data)
        except Exception as e:
            return restful.params_error(message=repr(e))
#用户定义之后的视图数据的页码获取数据
def maintain_monitor_visual_data(request):
    if request.method == "POST":
        start = datetime.now()
        delta = timedelta(days=300)
        end = start - delta
        page = int(request.POST['page'])
        number = request.POST['num']
        sn = str(request.POST.get('sn', ''))
        part_name = request.POST.get('partname', '')
        status = request.POST.get('status', '')
        s_time = request.POST.get('s_time', '')
        e_time = request.POST.get('e_time', '')
        user = request.POST.get('user', '')
        dict_data = {}
        # 计算 查询数据的总的多少条数据
        sql_count = 'select count(*) FROM "PartItem" where to_char("TrnDate",\'yyyy-MM-dd\') >= \'' + end.strftime(
            "%Y-%m-%d") + '\' and to_char("TrnDate",\'yyyy-MM-dd\') <= \'' + start.strftime("%Y-%m-%d") + '\''
        # 查询条件的数据
        sql = 'select "Id","SN","PartName","CheckCycleCount","UsedTimes","CheckCycle","NextCheckDate","Maintainer","TrnDate","NextCheckCount" FROM "PartItem" WHERE to_char("TrnDate",\'yyyy-MM-dd\') >= \'' + end.strftime(
            "%Y-%m-%d") + '\' and  to_char("TrnDate",\'yyyy-MM-dd\') <=\'' + start.strftime("%Y-%m-%d") + '\''
        count_count = Configuration.objects.get(Type="mt_count")
        date = Configuration.objects.get(Type="mt_date")
        dict_data['limit_value1'] = int(count_count.Max)
        dict_data['limit_value2'] = date.Max
        c_count = str(int(count_count.Max))
        c_date = (start + timedelta(days=int(date.Max))).strftime("%Y-%m-%d")  # 拿到当前的时间+预警天数得到日期的范围是（当前时间,c_date）
        try:
            if sn != "":
                sql_count = sql_count + 'AND "SN" = \'' + sn + '\''
                sql = sql + 'AND "SN" = \'' + sn + '\''
            if part_name != "":
                sql_count = sql_count + 'AND "PartName" like \'%{0}%\''.format(part_name)
                sql = sql + 'AND "PartName" like \'%{0}%\''.format(part_name)
            if s_time != "":
                sql_count = sql_count + 'AND "TrnDate" >= \'%{0}%\''.format(s_time)
                sql = sql + 'AND "TrnDate" >= \'%{0}%\''.format(s_time)
            if e_time != "":
                sql_count = sql_count + 'AND "TrnDate" <= \'%{0}%\''.format(e_time)
                sql = sql + 'AND "TrnDate" <= \'%{0}%\''.format(e_time)
            if user != "":
                sql_count = sql_count + 'AND "Maintainer" like \'%{0}%\''.format(user)
                sql = sql + 'AND "Maintainer" like \'%{0}%\''.format(user)
            if status == "#28a745":
                sql_count = sql_count + 'AND "NextCheckCount"-"UsedTimes" > ' + c_count + ' AND to_char("NextCheckDate",\'yyyy-MM-dd\') >\'' + c_date + '\' '

                sql = sql + 'AND "NextCheckCount"-"UsedTimes" > ' + c_count + ' AND to_char("NextCheckDate",\'yyyy-MM-dd\') >\'' + c_date + '\' '
            if status == "#ffc107":
                sql_count = sql_count + ' AND ("NextCheckCount"-"UsedTimes" <= ' + c_count + ' AND "NextCheckCount"-"UsedTimes" >= 0 AND to_char("NextCheckDate",\'yyyy-MM-dd\') >=\'' + start.strftime(
                    "%Y-%m-%d") + '\')'
                sql_count = sql_count + ' OR  (to_char("NextCheckDate",\'yyyy-MM-dd\')>=\'' + start.strftime(
                    "%Y-%m-%d") + '\' AND to_char("NextCheckDate",\'yyyy-MM-dd\') <= \'' + c_date + '\' AND "NextCheckCount"-"UsedTimes">=0)'

                sql = sql + ' AND ("NextCheckCount"-"UsedTimes" <= ' + c_count + ' AND "NextCheckCount"-"UsedTimes" >= 0 AND to_char("NextCheckDate",\'yyyy-MM-dd\') >=\'' + start.strftime(
                    "%Y-%m-%d") + '\')'
                sql = sql + ' OR  (to_char("NextCheckDate",\'yyyy-MM-dd\')>=\'' + start.strftime(
                    "%Y-%m-%d") + '\' AND to_char("NextCheckDate",\'yyyy-MM-dd\') <= \'' + c_date + '\' AND "NextCheckCount"-"UsedTimes">=0)'
            if status == "#dc3545":
                sql = sql + 'AND ("NextCheckCount"-"UsedTimes" < 0 OR "NextCheckDate" < \'' + start.strftime(
                    "%Y-%m-%d") + '\')'

                sql_count = sql_count + 'AND ("NextCheckCount"-"UsedTimes" < 0 OR "NextCheckDate" < \'' + start.strftime(
                    "%Y-%m-%d") + '\')'
            cur = connection.cursor()
            cur.execute(sql_count)
            count = cur.fetchall()  # 数量的总数
            if number == "All":
                cur = connection.cursor()
                cur.execute(sql)
                data = cur.fetchall()
                # 针对data 进行判断和算出次数水平和周期天数
                start_time = datetime.strptime(str(start).split(' ')[0], "%Y-%m-%d")  # 获取当前的日期
                for i in range(0, len(data)):
                    if data[i][6] == None and data[i][9] == 0:
                        data[i] = list(data[i])
                        data[i].append(0)
                        data[i].append(0)
                    else:
                        time_end = datetime.strptime(str(data[i][6]).split(' ')[0], "%Y-%m-%d")
                        days = time_end - start_time
                        data[i] = list(data[i])
                        data[i].append(data[i][9] - data[i][4])
                        data[i].append(days.days)
                dict_data['data'] = data
                dict_data['page_count'] = count[0][0]
            if number != "All":
                number = int(number)
                count_page = count[0][0] // int(number)  # 总数除以一页显示多少条，得到总的页数
                if count[0][0] % number > 0:
                    count_page += 1
                if page <= count_page:
                    sql = sql + ' order by "Id" limit ' + str(number) + ' offset ' + str(page - 1)
                    cur = connection.cursor()
                    cur.execute(sql)
                    data = cur.fetchall()
                    # 针对data 进行判断和算出次数水平和周期天数
                    start_time = datetime.strptime(str(start).split(' ')[0], "%Y-%m-%d")  # 获取当前的日期
                    for i in range(0, len(data)):
                        if data[i][6] == None and data[i][9] == 0:
                            data[i] = list(data[i])
                            data[i].append(0)
                            data[i].append(0)
                        else:
                            time_end = datetime.strptime(str(data[i][6]).split(' ')[0], "%Y-%m-%d")
                            days = time_end - start_time
                            data[i] = list(data[i])
                            data[i].append(data[i][9] - data[i][4])
                            data[i].append(days.days)
                    dict_data['data'] = data
                    dict_data['page_count'] = count_page
                if page > count_page:
                    sql = sql + ' order by "Id" limit ' + str(number) + ' offset ' + str(0)
                    cur = connection.cursor()
                    cur.execute(sql)
                    data = cur.fetchall()
                    # 针对data 进行判断和算出次数水平和周期天数
                    start_time = datetime.strptime(str(start).split(' ')[0], "%Y-%m-%d")  # 获取当前的日期
                    for i in range(0, len(data)):
                        if data[i][6] == None and data[i][9] == 0:
                            data[i] = list(data[i])
                            data[i].append(0)
                            data[i].append(0)
                        else:
                            time_end = datetime.strptime(str(data[i][6]).split(' ')[0], "%Y-%m-%d")
                            days = time_end - start_time
                            data[i] = list(data[i])
                            data[i].append(data[i][9] - data[i][4])
                            data[i].append(days.days)
                    dict_data['data'] = data
                    dict_data['page_count'] = count_page
            return restful.ok(data=dict_data)
        except Exception as e:
            return restful.params_error(message=repr(e))

#生成报表的数据
def maintain_record(request):
    if request.method == "POST":
        maintain_id = request.POST.getlist('maintain_id[]')
        tb1=['SN',"品名","保养周期(次数)","已使用次数","保养周期(时间)","下次保养时间","下次保养次数","保养人","预警次数","预警天数","状态"]    #表头信息
        sql = 'select "SN","Spec","CheckCycleCount","UsedTimes","CheckCycle",to_char("NextCheckDate",\'yyyy-MM-dd\'),"NextCheckCount","Maintainer" from "PartItem" where '
        config = 'select "Type","Max" from "Configuration" where "Type" = \''+'mt_count'+'\' or "Type" = \''+'mt_date'+'\''
        if len(maintain_id) == 1:
            maintain_id = maintain_id[0]
            sql = sql + '"PartItem"."Id"=' + maintain_id
        else:
            maintain_id = tuple(maintain_id)
            maintain_id = str(maintain_id)
            sql = sql + '"PartItem"."Id" in ' + maintain_id
        cur = connection.cursor()
        cur.execute(sql)
        data = cur.fetchall()
        cur.execute(config)
        stand_data = cur.fetchall()
        cur.close()
        stand = [int(attr[1]) for attr in stand_data] #[9,18]
        for i in range(0,len(data)):
            data[i] = list(data[i])
        for j in range(0,len(data)):
            data[j].extend(stand)
        data.insert(0,tb1)
        sheet_name = "设备保养监控报表"
        filename = 'Equipment_NGrate' + str(int(time.time())) + '.xlsx'  #表格的名字
        file_root = settings.MEDIA_MAINTAIN_MONITOR_ROOT                          #表格的存入目录下
        file_url = settings.MEDIA_MAINTAIN_MONITOR_URL                            #表格的url
        data = statement_excle(request, data, sheet_name, file_root, file_url, filename)
        try:
            return restful.ok(data=data)
        except:
            return restful.params_error(message="download fail")

#生成报表并存入服务器的函数
def statement_excle(request,data,sheet_name,file_root,file_url,filename):
    current = datetime.now()
    current_time = datetime.strptime(str(current).split(' ')[0], "%Y-%m-%d")  # 获取当前的日期
    delta = timedelta(days=int(data[1][9]))
    date = current + delta
    date = datetime.strptime(str(date).split(' ')[0], "%Y-%m-%d")
    wb = Workbook()                                                                 #创建对象
    wb.create_sheet(sheet_name, index=0)                                            #创建一个实例对象 第一张表格的表名字,和从第几个开始
    sheet = wb[sheet_name]
    for row in data:
        if len(row)==10:
            #normal 正常：
            if row[6]-row[3]>row[8] and datetime.strptime(row[5], "%Y-%m-%d") > date:
                row.append('正常')
            #警告warning :
            if 0<=row[6]-row[3] and row[6]-row[3]<=row[8] and datetime.strptime(row[5], "%Y-%m-%d") >=current_time :
                row.append('预警')
            if current_time <=datetime.strptime(row[5], "%Y-%m-%d") and datetime.strptime(row[5], "%Y-%m-%d") <= date and row[6]-row[3] >=0:
                row.append('预警')
            #超标 danger:
            if row[6]-row[3]<0 or datetime.strptime(row[5], "%Y-%m-%d")<current_time:
                row.append('超标')
        sheet.append(row)
    wb.save(os.path.join(file_root, filename))
    file_url = request.build_absolute_uri(file_url + filename)
    data = [file_url]
    return data

#捞出捞取数据库所有NG率达到或超过预警区间的USN发邮件提醒给收件人 定时的功能在被使用在DBexcle app。views里面的函数crontab_test使用了
def Check_monitor_equipment():
    monitor_count = "mt_count"
    monitor_date = "mt_date"
    count_stand = Configuration.objects.get(Type=monitor_count)
    date_stand = Configuration.objects.get(Type=monitor_date)
    c_date = (datetime.now() + timedelta(days=int(date_stand.Max))).strftime("%Y-%m-%d")  # 拿到当前的时间+预警天数得到日期的范围是（当前时间,c_date）
    sql = 'select "SN" from "PartItem" where "NextCheckCount"-"UsedTimes" < ' + str(count_stand) + ' OR to_char("NextCheckDate",\'yyyy-MM-dd\') >\'' + c_date + '\''
    cur = connection.cursor()
    cur.execute(sql)
    data = cur.fetchall()
    data = str(data)
    if len(data) > 0:
        email_1 = []
        receiver_list = str((count_stand.Reminders)).split(',')
        for i in range(len(receiver_list)):
            email_1.append(receiver_list[i] + '@wistron.com')
        subject = "NG reported rate of abnormal equipment"
        content = """
    <pre>
    Dear All,
        The follow equipment NG rate have reached or exceed the standard.

        Please click the link below to see the detail information:
        <a href="http://10.41.95.106:90/index">index AEMSLite</a>


    --------------------------------------------------------------------------------------------
        THIS EMAIL WAS SENT BY AEMS Lite SERVER AUTOMATICALLY. PLEASE DON'T DIRECTLY REPLY!!!
    </pre>
    """
        mail.sendmail(email_1, content, subject)

#数据重组的方法的小工具
def tab_query_way(tab_normal,tab_warning,tab_danger,):
    name_list=[]
    name_data=[]
    #获取名字的列表
    for i in range(0, len(tab_normal)):
        n_name = tab_normal[i][0]
        name_list.append(n_name)
    for j in range(0, len(tab_warning)):
        w_name = tab_warning[j][0]
        if w_name not in name_list:
            name_list.append(w_name)
    for k in range(0, len(tab_danger)):
        d_name = tab_danger[k][0]
        if d_name not in name_list:
            name_list.append(d_name)
    # 把数据变成[["name",0,0,0]] 初始化数据
    for l in range(0, len(name_list)):
        name_data.append([name_list[l], 0, 0, 0])
        # 添加normal 数据：[]   [('name',12)]
    if len(tab_normal) > 0:
        for a in range(0, len(name_data)):
            for b in range(0, len(tab_normal)):
                if tab_normal[b][0] == name_data[a][0]:
                    name_data[a][1] = tab_normal[b][1]
    # 添加warning 数据
    if len(tab_warning) > 0:
        for a in range(0, len(name_data)):
            for b in range(0, len(tab_warning)):
                if tab_warning[b][0] == name_data[a][0]:
                    name_data[a][2] = tab_warning[b][1]
    # 添加danger 数据
    if len(tab_danger) > 0:
        for a in range(0, len(name_data)):
            for b in range(0, len(tab_danger)):
                if tab_danger[b][0] == name_data[a][0]:
                    name_data[a][3] = tab_danger[b][1]
    return name_data




